{"version":3,"sources":["services/movieData.js","services/movieAPI.js","components/Loading.js","components/MovieForm.js","components/MovieCard.js","components/Navbar.js","components/Header.js","pages/EditMovie.js","pages/MovieDetails.js","pages/MovieList.js","pages/NewMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["movies","id","title","subtitle","storyline","rating","imagePath","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","getMovie","movieId","movie","find","mov","parseInt","Promise","resolve","setTimeout","updateMovie","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","Loading","className","src","width","alt","Component","MovieForm","props","state","handleSubmit","bind","onSubmit","this","field","newValue","setState","htmlFor","placeholder","type","value","onChange","event","target","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","defaultProps","PropTypes","objectOf","MovieCard","pathMovieDetails","to","Navbar","href","rel","Header","EditMovie","undefined","shouldRedirect","getMovieFunction","match","params","movieAPI","fetchData","MovieDetails","MovieList","key","NewMovie","NotFound","data-testid","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.374c9dc2.chunk.js","sourcesContent":["const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    setTimeout(() => {\n      const movies = readMovies();\n      resolve(movies);\n    }, 2000);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(movie);\n    }, 2000);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => {\n  const movies = readMovies().map((movie) => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie, ...updatedMovie };\n    }\n    return movie;\n  });\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const createMovie = (movieData) => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData, id: nextId };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ status: 'OK' });\n    }, 1000);\n  });\n};\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"loading\">\n        <img src=\"/images/loader.gif\" width=\"300px\" alt=\"Loading\"/>\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">Title</label>\n        <input\n          placeholder=\"Insert the title\"\n          id=\"movie_title\"\n          type=\"text\"\n          className=\"validate\"\n          value={title}\n          onChange={(event) => this.updateMovie('title', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">Subtitle</label>\n        <input\n          placeholder=\"Insert the subtitle\"\n          id=\"movie_subtitle\"\n          type=\"text\"\n          value={subtitle}\n          onChange={(event) => this.updateMovie('subtitle', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">Poster</label>\n        <input\n          placeholder=\"Insert the image path\"\n          id=\"movie_image\"\n          type=\"text\"\n          value={imagePath}\n          onChange={(event) => this.updateMovie('imagePath', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n      <label htmlFor=\"movie_storyline\">Story Line</label>\n      <textarea\n        id=\"movie_storyline\"\n        value={storyline}\n        onChange={(event) => this.updateMovie('storyline', event.target.value)}\n      />\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">Genre</label>\n        <select\n          id=\"movie_genre\"\n          value={genre}\n          onChange={(event) => this.updateMovie('genre', event.target.value)}\n        >\n          <option value=\"action\">Action</option>\n          <option value=\"comedy\">Comedy</option>\n          <option value=\"thriller\">Thriller</option>\n          <option value=\"fantasy\">Fantasy</option>\n        </select>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    \n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">Rating</label>\n        <input\n          placeholder=\"Rate the movie\"\n          id=\"movie_rating\"\n          type=\"number\"\n          step={0.1}\n          min={0}\n          max={5}\n          value={rating}\n          onChange={(event) => this.updateMovie('rating', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          className=\"bt center green\"\n          onClick={this.handleSubmit}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"form-content\">\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.defaultProps = { movie: PropTypes.objectOf() };\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    bookmarked: PropTypes.bool,\n    genre: PropTypes.string,\n    id: PropTypes.number,\n    imagePath: PropTypes.string,\n    rating: PropTypes.number,\n    storyLine: PropTypes.string,\n    subtitle: PropTypes.string,\n    title: PropTypes.string,\n  }),\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie: { id, title, storyline } } = this.props;\n    const pathMovieDetails = `/movies/${id}`;\n    return (\n      <div className=\"movie-card\">\n        <h3 className=\"title-card\">{title}</h3>\n        <Link to={pathMovieDetails} className=\"link right-bt\">\n          <button type=\"button\" className=\"bt-add-new\">\n              <img src=\"/images/plus-icon.png\" width=\"16px\" alt=\"\" />\n              <span className=\"text-bt\">ver detalhes</span>\n          </button>\n        </Link>\n        <h5>{storyline}</h5>\n      </div>\n    );\n  }\n}\n\nMovieCard.defaultProps = { movie: PropTypes.objectOf() };\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    storyLine: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport '../App.css';\n\nconst Navbar = () => {\n  const urlGitHub = 'https://github.com/vbuzato/sd-06-project-movie-card-library-crud' \n  return (\n    <div className=\"bg-navigation\">\n      <nav className=\"nav-wrap\">\n        <div className=\"github-see-code\">\n          <div className=\"bg-see-github\">\n            <a href={urlGitHub} className=\"link-nav\" target=\"_blank\" rel=\"noopener noreferrer\">\n              <img src=\"/images/github-logo.png\" alt=\"GitHub\" />\n              <span className=\"see-code\">See the code on github</span>\n            </a>\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar; ","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header>\n        <h1 className=\"title-movie-card\">Movie Card Library CRUD</h1>\n          <Link to=\"/movies/new\" className=\"link\">\n            <button type=\"button\" className=\"bt-add-new\">\n                <img src=\"/images/plus-icon.png\" alt=\"\" />\n                <span className=\"text-bt\">Add new card</span>\n            </button>\n          </Link>\n      </header>\n    );\n\n  }\n};\n\nexport default Header; ","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport * as movieAPI from '../services/movieAPI';\nimport { MovieForm, Loading } from '../components';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: undefined,\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.getMovieFunction();\n  }\n\n  async getMovieFunction() {\n    const id = this.props.match.params.id;\n    const fetchData = await movieAPI.getMovie(id);\n    this.setState({ movie: fetchData });\n  }\n\n  async handleSubmit(updatedMovie) {\n    await movieAPI.updateMovie(updatedMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { shouldRedirect, movie } = this.state;\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n\n    if (!movie) return <Loading />;\n\n    return (\n      <div className=\"content\">\n        <MovieForm movie={movie} onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n\n    this.deleteMovie = this.deleteMovie.bind(this);\n\n    this.state = {\n      movie: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getMovieFunction();\n  }\n\n  async getMovieFunction() {\n    const id = this.props.match.params.id;\n    const fetchData = await movieAPI.getMovie(id);\n    this.setState({ movie: fetchData });\n  }\n\n  async deleteMovie(movieId) {\n    await movieAPI.deleteMovie(movieId);\n  }\n\n  render() {\n    const { movie } = this.state;\n    const { id, title, storyline, imagePath, genre, rating, subtitle } = movie;\n\n    if (movie.length === 0) return <Loading />;\n\n    return (\n      <div className=\"content\">\n        <div className=\"movie-card card-movie-details\">\n          <h3 className=\"title-card\">{title} - {subtitle}</h3>\n          <img alt=\"Movie Cover\" src={`../${imagePath}`} width=\"40%\" />\n          <div className=\"card-description\">\n            <p className=\"storyline\">{storyline}</p>\n            <p className=\"genre-rating\">{`Genre: ${genre} | Rating: ${rating}`}</p>\n            <div className=\"buttons\">\n              <Link to={`/movies/${id}/edit`}>\n                <button className=\"bt\">edit</button>\n              </Link>\n              <Link to=\"/\">\n                <button className=\"bt\">home</button>\n              </Link>\n              <Link to=\"/\">\n                <button className=\"bt bt-delete\"\n                  type=\"button\"\n                  onClick={() => this.deleteMovie(id)}\n                >\n                  delete\n                </button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport MovieCard from '../components/MovieCard';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  async fetchData() {\n    const fetchData = await movieAPI.getMovies();\n    this.setState({ movies: fetchData });\n  }\n\n  render() {\n    const { movies } = this.state;\n\n    if (movies.length === 0) return <Loading />;\n\n    return (\n      <div className=\"content\">\n        {movies.map((movie) => <MovieCard key={movie.id} movie={movie} />)}\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.state = {\n      shouldRedirect: false,\n    };\n  }\n\n  async handleSubmit(newMovie) {\n    await movieAPI.createMovie(newMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n\n    return (\n      <div className=\"content\">\n        <MovieForm onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport {\n  EditMovie,\n  MovieDetails,\n  MovieList,\n  NewMovie,\n  NotFound,\n} from \"./pages\";\nimport { Navbar, Header } from \"./components\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Navbar />\n      <Header />\n      <Switch>\n        <Route path=\"/movies/new\" component={NewMovie} />\n        <Route path=\"/movies/:id/edit\" component={EditMovie} />\n        <Route path=\"/movies/:id\" component={MovieDetails} />\n        <Route exact path=\"/\" component={MovieList} />\n        <Route component={NotFound} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}